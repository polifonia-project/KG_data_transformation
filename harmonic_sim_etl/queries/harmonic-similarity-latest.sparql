# Query to extract data from preprocessed file with harmonic similarity related to Music domain
# and build a Knowledge Graph according to Polifonia ontology network, using sparql.anything



# POLIFONIA prefixes
PREFIX core:    <https://w3id.org/polifonia/ON/core/> 
PREFIX mp:      <https://w3id.org/polifonia/ON/musical-performance/>
PREFIX mc:      <https://w3id.org/polifonia/ON/musical-composition/>
PREFIX mf:      <https://w3id.org/polifonia/ON/musical-feature/>
PREFIX cm:      <https://w3id.org/polifonia/ON/comparative-measure/>
PREFIX rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:    <http://www.w3.org/2000/01/rdf-schema#>
PREFIX pr:      <https://w3id.org/polifonia/resource/>

# SPARQL anything prefixes
PREFIX fx:  <http://sparql.xyz/facade-x/ns/>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>


CONSTRUCT { 

    # Recording
    ?recordingAIRI  a mp:Recording ;
                    cm:isRecordingInvolvedInHarmSim ?harmonicSimIRI ;
                    cm:isRecordingInvolvedInCPSim ?chordProgressionInSimilarityAIRI .

    ?recordingBIRI a mp:Recording ;
                    cm:isRecordingInvolvedInHarmSim ?harmonicSimIRI ;
                    cm:isRecordingInvolvedInCPSim ?chordProgressionInSimilarityBIRI .

    # ChordProgression
    ?chordProgressionAIRI   a mf:ChordProgression ;
                    cm:isChordProgressioninCPSim ?chordProgressionInSimilarityAIRI .


    ?chordProgressionBIRI   a mf:ChordProgression ;
                        cm:isChordProgressioninCPSim ?chordProgressionInSimilarityBIRI .

    # HarmonicSimilarity
    ?harmonicSimIRI a cm:HarmonicSimilarity ;
                    cm:hasChordProgressionInHarmSim ?chordProgressionInSimilarityAIRI ;
                    cm:hasChordProgressionInHarmSim ?chordProgressionInSimilarityBIRI ;
                    cm:similarityScore ?simScore ;
                    cm:harmSimInvolvesRecording ?recordingAIRI ;
                    cm:harmSimInvolvesRecording ?recordingBIRI .
    
    ?chordProgressionInSimilarityAIRI a cm:ChordProgressionInSimilarity ;
                                    cm:isChordProgressioninHarmSim ?harmonicSimIRI ;
                                    core:hasTimeInterval ?timeIntervalAIRI;
                                    cm:aboutChordProgression ?chordProgressionAIRI;
                                    cm:CPSimInvolvesRecording ?recordingAIRI .

    ?chordProgressionInSimilarityBIRI a cm:ChordProgressionInSimilarity ;
                                    cm:isChordProgressioninHarmSim ?harmonicSimIRI ;
                                    core:hasTimeInterval ?timeIntervalBIRI;
                                    cm:aboutChordProgression ?chordProgressionBIRI;
                                    cm:CPSimInvolvesRecording ?recordingBIRI .

    ?timeIntervalAIRI    a core:TimeInterval ;
                            core:startTime ?beginCPA ;
                            core:endTime ?endCPA .

    ?timeIntervalBIRI    a core:TimeInterval ;
                            core:startTime ?beginCPB ;
                            core:endTime ?endCPB .
}
    

    WHERE {


    SERVICE <x-sparql-anything:> {

        fx:properties fx:location "data/harmonic_similarity_v3.json"  ;
        fx:media-type "application/json" ;
        fx:blank-nodes false    .

            ?similarity xyz:recordingA ?recordingAid ;
                        xyz:recordingB ?recordingBid ;
                        xyz:compSimScore ?simScore ;
                        xyz:cpMatches ?cpMatchesList .

            ?cpMatchesList ?li ?cpMatch .

            ?cpMatch xyz:cpMatchId ?cpMatchId ;
                    xyz:cpaA ?chordProgressionA ;
                    xyz:cpaB ?chordProgressionB .

            ?chordProgressionA xyz:id ?chordProgressionAid ;
                            xyz:start ?beginCPA ;
                            xyz:end ?endCPA .


            ?chordProgressionB xyz:id ?chordProgressionBid ;
                            xyz:start ?beginCPB ;
                            xyz:end ?endCPB .
            
        } 


    # generate resources IRIs from string IDs
    BIND(IRI(CONCAT( STR(pr:) , "Recording/", ENCODE_FOR_URI(?recordingAid))) AS ?recordingAIRI)
    BIND(IRI(CONCAT( STR(pr:) , "Recording/", ENCODE_FOR_URI(?recordingBid))) AS ?recordingBIRI)
    BIND(IRI(CONCAT( STR(pr:) , "ChordProgression/", ENCODE_FOR_URI(?recordingAid), "_", ENCODE_FOR_URI(?chordProgressionAid))) AS ?chordProgressionAIRI)
    BIND(IRI(CONCAT( STR(pr:) , "ChordProgression/", ENCODE_FOR_URI(?recordingBid), "_", ENCODE_FOR_URI(?chordProgressionBid))) AS ?chordProgressionBIRI)
    BIND(IRI(CONCAT( STR(pr:) , "HarmonicSimilarity/harm_sim_", ENCODE_FOR_URI(?recordingAid), "_", ENCODE_FOR_URI(?recordingBid))) AS ?harmonicSimIRI)
    BIND(IRI(CONCAT( STR(pr:) , "TimeInterval/", ENCODE_FOR_URI(?beginCPA), "_", ENCODE_FOR_URI(?endCPA))) AS ?timeIntervalAIRI)
    BIND(IRI(CONCAT( STR(pr:) , "TimeInterval/", ENCODE_FOR_URI(?beginCPB), "_", ENCODE_FOR_URI(?endCPB))) AS ?timeIntervalBIRI)
    BIND(IRI(CONCAT( STR(pr:) , "ChordProgressionInSimilarity/", ENCODE_FOR_URI(?chordProgressionAid), "_", ENCODE_FOR_URI(?beginCPA), "_", ENCODE_FOR_URI(?endCPA))) AS ?chordProgressionInSimilarityAIRI)
    BIND(IRI(CONCAT( STR(pr:) , "ChordProgressionInSimilarity/", ENCODE_FOR_URI(?chordProgressionBid), "_", ENCODE_FOR_URI(?beginCPB), "_", ENCODE_FOR_URI(?endCPB))) AS ?chordProgressionInSimilarityBIRI)

}